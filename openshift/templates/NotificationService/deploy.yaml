kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: jum-api-deploy
  annotations:
    openshift.io/display-name: .NET Core 3.1 Deployment Template
    description: Deployment template for a .NET Core 3.1 application.
    tags: jum-api,netcore,api
parameters:
  - name: APP_NAME
    displayName: "App Name"
    description: "The name of the application (grouped)."
    required: true
    value: "jum"
  - name: ROLE_NAME
    displayName: "Component Role Name"
    description: "The name of the application component role (e.g web, api, database)."
    required: true
    value: "api"
  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "e84410"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod, tools]"
    required: true
    value: "dev"
  - name: INSTANCE
    displayName: "Unique Identifier"
    description: "A unique identifier to allow for multiple instances (i.e. '-01')."
    value: ""
  - name: INSTANCELABEL
    displayName: "Unique Identifier"
    description: "A unique identifier to allow for multiple instances (i.e. '-01')."
    value: ""
  - name: IMAGE_TAG
    displayName: "Image Tag Name"
    description: "The image tag that will be used for this deployment.
      This provides a way to setup an environment for other branches."
    value: "dev"
  - name: TIME_ZONE
    displayName: "Time Zone"
    description: "The time zone of the pod."
    value: "America/Los_Angeles"

  - name: APP_DOMAIN
    displayName: "Application Hostname"
    description: "The exposed hostname that will route to the the .NET Core service, if left blank a value will be defaulted."
    value: "jum-api-e84410-dev.apps.gold.devops.gov.bc.ca"
  - name: APP_PORT
    displayName: "Application Port"
    description: "The port used to communicate with the Pod"
    value: "8080"
  - name: API_PATH
    displayName: "API URL Path"
    description: "The URL path to the API"
    value: "/api"
  - name: API_DOCS_PATH
    displayName: "Swagger Path"
    description: "The URL path to the API Swagger endpoint"
    value: "/swagger"

  - name: ASPNETCORE_ENVIRONMENT
    displayName: "AspNetCore Environment"
    description: "The ASP Net Core deployment environment setting, [Development, Staging, Production]."
    required: true
    value: "Production"
  - name: ASPNETCORE_URLS
    displayName: "AspNetCore URLs"
    description: "The ASP Net Core URLs that the service will listen to (i.e. http://*:8080)."
    value: "http://*:8080"

  - name: DATABASE_ROLE_NAME
    displayName: "Database Component Role Name"
    description: "The database name of the application component role (e.g web, api, database)."
    required: true
    value: "database"
  - name: CONNECTION_STRINGS_JUM
    displayName: "JUM API Database Connection String"
    description: "The JUM API database connection string."
    value: "Server=jum-database,1433;User ID=admin;Password=$(DB_PASSWORD)Database=jum;TrustServerCertificate=true"

  - name: KEYCLOAK_REALMURL
    displayName: "Keycloak Realm URL"
    description: "The name realm"
    value: "https://sso-dev-5b7aa5-dev.apps.silver.devops.gov.bc.ca/auth/realms/DEMSPOC"
  - name: KEYCLOAK_ADMINURL
    displayName: "Keycloak SSO Authority"
    description: "The full URL to the SSO Keycloak Admin client (i.e. https://dev.oidc.gov.bc.ca/auth/realms/72x8v9rw)"
    value: "https://sso-dev-5b7aa5-dev.apps.silver.devops.gov.bc.ca/auth/admin/realms/DEMSPOC"
  - name: KEYCLOAK_ADMIN_CLIENT_ID
    displayName: "Keycloak SSO Admin Authority"
    description: "The full URL to the SSO Keycloak Admin client (i.e. https://dev.oidc.gov.bc.ca/auth/admin/realms/72x8v9rw)"
    value: "pims-service-account"
  - name: KEYCLOAK_ADMIN_CLIENT_SECRET
    displayName: "Keycloak client secret."
    description: "The Keycloak SSO client secret."
    value: "e4b312a1-f2c0-4ba6-90b0-5397d551968d"
  - name: KEYCLOAK_SERVICE_ACCOUNT_SECRET
    displayName: "Keycloak Service Account client secret."
    description: "The Keycloak SSO Service Account client secret."

  - name: CHES_USERNAME
    displayName: "CHES Username."
    description: "The Common Hosted Email Service username."
    required: false
  - name: CHES_PASSWORD
    displayName: "CHES Username password."
    description: "The Common Hosted Email Service password."
    required: false

  - name: MY_LTSA_USERNAME
    displayName: "My Ltsa Username."
    description: "The LTSA username."
    required: false
  - name: MY_LTSA_PASSWORD
    displayName: "My Ltsa password."
    description: "The LTSA password."
    required: false
  - name: INTEGRATOR_USERNAME
    displayName: "Ltsa Integrator Username."
    description: "The LTSA username."
    required: false
  - name: INTEGRATOR_PASSWORD
    displayName: "Ltsa Integrator password."
    description: "The LTSA password."
    required: false

  - name: GEOCODER_KEY
    displayName: "Geocoder Secret Key."
    description: "The Geocoder secret key that must be ."
    required: false
  - name: ELASTIC_PASSWORD
    displayName: "Elasticsearch Password."
    description: "Elasticsearch password."
    required: false

  - name: HEALTH_SCHEME
    displayName: "Health Scheme"
    description: "Scheme used to connect to health check endpoints (HTTP or HTTPS)."
    value: HTTP
  - name: LIVENESS_PATH
    displayName: "Liveness Path"
    description: "Liveness health check api path."
    value: "/health/live"
  - name: READINESS_PATH
    displayName: "Readiness Path"
    description: "Readiness health check api path."
    value: "/health/ready"

  - name: REPLICAS
    displayName: "Pod Replicas"
    description: "Number of pod replicas to run"
    value: "2"

  - name: CPU_REQUEST
    displayName: "CPU Request"
    description: "Starting amount of CPU the container can use."
    value: "100m"
  - name: CPU_LIMIT
    displayName: "CPU Limit"
    description: "Maximum amount of CPU the container can use."
    value: "1"
  - name: MEMORY_REQUEST
    displayName: "Memory Request"
    description: "Starting amount of memory the container can use."
    value: "500Mi"
  - name: MEMORY_LIMIT
    displayName: "Memory Limit"
    description: "Maximum amount of memory the container can use."
    value: "4Gi"
objects:
  # Allow the api to communicate with the database.
  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: pod-from-pod-permit-${APP_NAME}-${ROLE_NAME}-${DATABASE_ROLE_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
    spec:
      #description: Allow database pod(s) to receive communication from api pod(s).
      podSelector:
        matchLabels:
          app: ${APP_NAME}
          role: ${DATABASE_ROLE_NAME}
          env: ${ENV_NAME}
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  app: ${APP_NAME}
                  role: ${ROLE_NAME}
                  env: ${ENV_NAME}

  # Open up ports to communicate with the api.
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Exposes and load balances the application pods.
      labels:
        name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      ports:
        - name: ${APP_PORT}-tcp
          protocol: TCP
          port: ${{APP_PORT}}
          targetPort: ${{APP_PORT}}
      selector:
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
      type: ClusterIP
      sessionAffinity: None

  # Keycloak configuration secrets.
  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-sso${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "Keycloak SSO client secrets"
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-sso${INSTANCE}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    type: Opaque
    stringData:
      KEYCLOAK_ADMIN_CLIENT_SECRET: ${KEYCLOAK_ADMIN_CLIENT_SECRET}
      KEYCLOAK_ADMIN_CLIENT_ID: ${KEYCLOAK_ADMIN_CLIENT_ID}

  # Keycloak configuration settings.
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-sso${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "Keycloak SSO client configuration"
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-sso${INSTANCE}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    type: Opaque
    data:
      KEYCLOAK_REALMURL: ${KEYCLOAK_REALMURL}
      KEYCLOAK_ADMINURL: ${KEYCLOAK_ADMINURL}
      KEYCLOAK_ADMIN_AUTHORITY: ${KEYCLOAK_ADMIN_AUTHORITY}

  # CHES configuration secrets.
  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-ches${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "CHES client secrets"
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-ches${INSTANCE}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    type: Opaque
    stringData:
      CHES_USERNAME: ${CHES_USERNAME}
      CHES_PASSWORD: ${CHES_PASSWORD}

    # LTSA configuration secrets.
  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-ltsa${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "LTSA client secrets"
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-ltsa${INSTANCE}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    type: Opaque
    stringData:
      MY_LTSA_USERNAME: ${MY_LTSA_USERNAME}
      MY_LTSA_PASSWORD: ${MY_LTSA_PASSWORD}
      INTEGRATOR_USERNAME: ${INTEGRATOR_USERNAME}
      INTEGRATOR_PASSWORD: ${INTEGRATOR_PASSWORD}

  # Geocoder configuration secrets.
  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-geocoder${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "Geocoder client secrets"
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-geocoder${INSTANCE}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    type: Opaque
    stringData:
      GEOCODER_KEY: ${GEOCODER_KEY}

  # Elasticsearch configuration secrets.
  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-elasticsearch${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "Elastic search password"
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-elasticsearch${INSTANCE}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    type: Opaque
    stringData:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}

  # Database configuration settings.
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-database${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "Database client configuration"
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-database${INSTANCE}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    type: Opaque
    data:
      CONNECTION_STRINGS_JUM: ${CONNECTION_STRINGS_JUM}

  # Deployment configuration to deploy the API.
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "Defines how to deploy ${APP_NAME}-${ROLE_NAME}"
      labels:
        name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      strategy:
        type: Rolling
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APP_NAME}-${ROLE_NAME}${INSTANCE}
            from:
              kind: ImageStreamTag
              namespace: "${PROJECT_NAMESPACE}-tools"
              name: "${APP_NAME}-${ROLE_NAME}:${IMAGE_TAG}"
      replicas: ${{REPLICAS}}
      selector:
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
      template:
        metadata:
          name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
          labels:
            name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
            app: ${APP_NAME}
            role: ${ROLE_NAME}
            env: ${ENV_NAME}
        spec:
          containers:
            - name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
              image: ""
              ports:
                - containerPort: ${{APP_PORT}}
                  protocol: TCP
              env:
                - name: ASPNETCORE_ENVIRONMENT
                  value: ${ASPNETCORE_ENVIRONMENT}
                - name: ASPNETCORE_URLS
                  value: ${ASPNETCORE_URLS}
                - name: HealthChecks__LivePath
                  value: ${LIVENESS_PATH}
                - name: HealthChecks__ReadyPath
                  value: ${READINESS_PATH}
                - name: TZ
                  value: ${TIME_ZONE}
                - name: ConnectionStrings__JumDatabase
                  valueFrom:
                    configMapKeyRef:
                      name: ${APP_NAME}-${ROLE_NAME}-database${INSTANCE}
                      key: CONNECTION_STRINGS_JUM
                - name: DB_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${DATABASE_ROLE_NAME}${INSTANCE}
                      key: DB_USER
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${DATABASE_ROLE_NAME}${INSTANCE}
                      key: DB_PASSWORD
                - name: Keycloak__RealmUrl
                  valueFrom:
                    configMapKeyRef:
                      name: ${APP_NAME}-${ROLE_NAME}-sso${INSTANCE}
                      key: KEYCLOAK_REALMURL
                - name: Keycloak__AdministrationUrl
                  valueFrom:
                    configMapKeyRef:
                      name: ${APP_NAME}-${ROLE_NAME}-sso${INSTANCE}
                      key: KEYCLOAK_ADMINURL
                - name: Keycloak__AdministrationClientId
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${ROLE_NAME}-sso${INSTANCE}
                      key: KEYCLOAK_ADMIN_CLIENT_ID
                - name: Keycloak__AdministrationClientSecret
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${ROLE_NAME}-sso${INSTANCE}
                      key: KEYCLOAK_ADMIN_CLIENT_SECRET
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: ${READINESS_PATH}
                  port: ${{APP_PORT}}
                  scheme: ${HEALTH_SCHEME}
                initialDelaySeconds: 1
                periodSeconds: 60
                successThreshold: 1
                timeoutSeconds: 30
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: ${LIVENESS_PATH}
                  port: ${{APP_PORT}}
                  scheme: ${HEALTH_SCHEME}
                initialDelaySeconds: 1
                periodSeconds: 60
                successThreshold: 1
                timeoutSeconds: 30
