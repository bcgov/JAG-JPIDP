// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using NotificationService.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NotificationService.Migrations
{
    [DbContext(typeof(NotificationDbContext))]
    partial class NotificationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("notification")
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NotificationService.Features.DataGeneration.Model.TemplateGenerator", b =>
                {
                    b.Property<string>("TemplateName")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("TemplateUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TemplateName", "Type");

                    b.ToTable("TemplateGenerator", "notification");
                });

            modelBuilder.Entity("NotificationService.NotificationEvents.UserProvisioning.Models.EmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DateSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LatestStatus")
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("SendType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SentResponseId")
                        .HasColumnType("uuid");

                    b.Property<string>("SentTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("text");

                    b.Property<int>("UpdateCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EmailLog", "notification");
                });

            modelBuilder.Entity("NotificationService.NotificationEvents.UserProvisioning.Models.IdempotentConsumer", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<string>("Consumer")
                        .HasColumnType("text");

                    b.HasKey("MessageId", "Consumer");

                    b.ToTable("IdempotentConsumers", "notification");
                });

            modelBuilder.Entity("NotificationService.NotificationEvents.UserProvisioning.Models.NotificationAckModel", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<int>("AccessRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("Consumer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DomainEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PartId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Subject")
                        .HasColumnType("integer");

                    b.HasKey("NotificationId", "EmailAddress");

                    b.ToTable("Notifications", "notification");
                });
#pragma warning restore 612, 618
        }
    }
}
