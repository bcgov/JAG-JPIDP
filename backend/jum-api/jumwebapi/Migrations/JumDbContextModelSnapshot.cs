// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using jumwebapi.Data;

#nullable disable

namespace jumwebapi.Migrations
{
    [DbContext(typeof(JumDbContext))]
    partial class JumDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("jumwebapi.Data.ef.JustinAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("JustinAddress");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinAgency", b =>
                {
                    b.Property<long>("AgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AgencyId"));

                    b.Property<string>("AgencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AgencyId");

                    b.ToTable("JustinAgency");

                    b.HasData(
                        new
                        {
                            AgencyId = 1L,
                            AgencyCode = "SPD",
                            Created = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "",
                            Modified = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Sannich Police Department"
                        },
                        new
                        {
                            AgencyId = 2L,
                            AgencyCode = "VICPD",
                            Created = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "",
                            Modified = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Victoria Police Department"
                        },
                        new
                        {
                            AgencyId = 3L,
                            AgencyCode = "DPD",
                            Created = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "",
                            Modified = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Delta Police Department"
                        },
                        new
                        {
                            AgencyId = 4L,
                            AgencyCode = "VPD",
                            Created = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "",
                            Modified = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Vancouver Police Department"
                        },
                        new
                        {
                            AgencyId = 5L,
                            AgencyCode = "RCMP",
                            Created = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "",
                            Modified = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Royal Canada Mount Police"
                        });
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinAgencyAssignment", b =>
                {
                    b.Property<long>("AgencyAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AgencyAssignmentId"));

                    b.Property<long?>("AgencyId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AgencyAssignmentId");

                    b.HasIndex("AgencyId");

                    b.ToTable("JustinAgencyAssignment");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinIdentityProvider", b =>
                {
                    b.Property<long>("IdentityProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdentityProviderId"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Keycloak_idp_alias");

                    b.Property<string>("AuthUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("InternalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdentityProviderId");

                    b.ToTable("JustinIdentityProvider");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinPartyType", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("PartyTypeLookup");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Name = "Organization"
                        },
                        new
                        {
                            Code = 2,
                            Name = "Individual"
                        },
                        new
                        {
                            Code = 3,
                            Name = "Staff"
                        });
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinPerson", b =>
                {
                    b.Property<long>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PersonId"));

                    b.Property<string>("AddressComment")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDisabled")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("MiddleNames")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NameSuffix")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreferredName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PersonId");

                    b.HasIndex("AddressId");

                    b.ToTable("JustinPerson");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinRole", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RoleId"));

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("IsDisabled")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPublic")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RoleId");

                    b.ToTable("JustinRole");

                    b.HasData(
                        new
                        {
                            RoleId = 1L,
                            Created = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Super Users",
                            IsDisabled = false,
                            IsPublic = false,
                            Modified = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Administrator"
                        },
                        new
                        {
                            RoleId = 2L,
                            Created = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "BCPS Users",
                            IsDisabled = false,
                            IsPublic = false,
                            Modified = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "BCPS"
                        },
                        new
                        {
                            RoleId = 3L,
                            Created = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Defence Users",
                            IsDisabled = false,
                            IsPublic = false,
                            Modified = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Defence Council"
                        },
                        new
                        {
                            RoleId = 4L,
                            Created = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Police Users",
                            IsDisabled = false,
                            IsPublic = false,
                            Modified = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Police"
                        },
                        new
                        {
                            RoleId = 5L,
                            Created = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Accused Users",
                            IsDisabled = false,
                            IsPublic = false,
                            Modified = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Accused"
                        },
                        new
                        {
                            RoleId = 6L,
                            Created = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "OutofCustody Users",
                            IsDisabled = false,
                            IsPublic = false,
                            Modified = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "OutofCustody"
                        });
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinUser", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DigitalIdentifier")
                        .HasColumnType("uuid");

                    b.Property<long?>("IdentityProviderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PartyTypeCode")
                        .HasColumnType("integer");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("IdentityProviderId");

                    b.HasIndex("ParticipantId")
                        .IsUnique();

                    b.HasIndex("PartyTypeCode");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("JustinUser");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinUserRole", b =>
                {
                    b.Property<long>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserRoleId"));

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("JustinUserRole");
                });

            modelBuilder.Entity("jumwebapi.Features.UserChangeManagement.Data.JustinUserChange", b =>
                {
                    b.Property<int>("EventMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventMessageId"));

                    b.Property<Instant>("Completed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PartId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EventMessageId");

                    b.ToTable("JustinUserChange");
                });

            modelBuilder.Entity("jumwebapi.Features.UserChangeManagement.Data.JustinUserChangeTarget", b =>
                {
                    b.Property<int>("ChangeTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChangeTargetId"));

                    b.Property<string>("ChangeStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("CompletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JustinUserChangeId")
                        .HasColumnType("integer");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ChangeTargetId");

                    b.HasIndex("JustinUserChangeId");

                    b.ToTable("JustinUserChangeTarget");
                });

            modelBuilder.Entity("jumwebapi.Models.Lookups.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("CountryLookup");

                    b.HasData(
                        new
                        {
                            Code = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            Code = "US",
                            Name = "United States"
                        });
                });

            modelBuilder.Entity("jumwebapi.Models.Lookups.Province", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Code = "AB",
                            CountryCode = "CA",
                            Name = "Alberta"
                        },
                        new
                        {
                            Code = "BC",
                            CountryCode = "CA",
                            Name = "British Columbia"
                        },
                        new
                        {
                            Code = "MB",
                            CountryCode = "CA",
                            Name = "Manitoba"
                        },
                        new
                        {
                            Code = "NB",
                            CountryCode = "CA",
                            Name = "New Brunswick"
                        },
                        new
                        {
                            Code = "NL",
                            CountryCode = "CA",
                            Name = "Newfoundland and Labrador"
                        },
                        new
                        {
                            Code = "NS",
                            CountryCode = "CA",
                            Name = "Nova Scotia"
                        },
                        new
                        {
                            Code = "ON",
                            CountryCode = "CA",
                            Name = "Ontario"
                        },
                        new
                        {
                            Code = "PE",
                            CountryCode = "CA",
                            Name = "Prince Edward Island"
                        },
                        new
                        {
                            Code = "QC",
                            CountryCode = "CA",
                            Name = "Quebec"
                        },
                        new
                        {
                            Code = "SK",
                            CountryCode = "CA",
                            Name = "Saskatchewan"
                        },
                        new
                        {
                            Code = "NT",
                            CountryCode = "CA",
                            Name = "Northwest Territories"
                        },
                        new
                        {
                            Code = "NU",
                            CountryCode = "CA",
                            Name = "Nunavut"
                        },
                        new
                        {
                            Code = "YT",
                            CountryCode = "CA",
                            Name = "Yukon"
                        },
                        new
                        {
                            Code = "AL",
                            CountryCode = "US",
                            Name = "Alabama"
                        },
                        new
                        {
                            Code = "AK",
                            CountryCode = "US",
                            Name = "Alaska"
                        },
                        new
                        {
                            Code = "AS",
                            CountryCode = "US",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Code = "AZ",
                            CountryCode = "US",
                            Name = "Arizona"
                        },
                        new
                        {
                            Code = "AR",
                            CountryCode = "US",
                            Name = "Arkansas"
                        },
                        new
                        {
                            Code = "CA",
                            CountryCode = "US",
                            Name = "California"
                        },
                        new
                        {
                            Code = "CO",
                            CountryCode = "US",
                            Name = "Colorado"
                        },
                        new
                        {
                            Code = "CT",
                            CountryCode = "US",
                            Name = "Connecticut"
                        },
                        new
                        {
                            Code = "DE",
                            CountryCode = "US",
                            Name = "Delaware"
                        },
                        new
                        {
                            Code = "DC",
                            CountryCode = "US",
                            Name = "District of Columbia"
                        },
                        new
                        {
                            Code = "FL",
                            CountryCode = "US",
                            Name = "Florida"
                        },
                        new
                        {
                            Code = "GA",
                            CountryCode = "US",
                            Name = "Georgia"
                        },
                        new
                        {
                            Code = "GU",
                            CountryCode = "US",
                            Name = "Guam"
                        },
                        new
                        {
                            Code = "HI",
                            CountryCode = "US",
                            Name = "Hawaii"
                        },
                        new
                        {
                            Code = "ID",
                            CountryCode = "US",
                            Name = "Idaho"
                        },
                        new
                        {
                            Code = "IL",
                            CountryCode = "US",
                            Name = "Illinois"
                        },
                        new
                        {
                            Code = "IN",
                            CountryCode = "US",
                            Name = "Indiana"
                        },
                        new
                        {
                            Code = "IA",
                            CountryCode = "US",
                            Name = "Iowa"
                        },
                        new
                        {
                            Code = "KS",
                            CountryCode = "US",
                            Name = "Kansas"
                        },
                        new
                        {
                            Code = "KY",
                            CountryCode = "US",
                            Name = "Kentucky"
                        },
                        new
                        {
                            Code = "LA",
                            CountryCode = "US",
                            Name = "Louisiana"
                        },
                        new
                        {
                            Code = "ME",
                            CountryCode = "US",
                            Name = "Maine"
                        },
                        new
                        {
                            Code = "MD",
                            CountryCode = "US",
                            Name = "Maryland"
                        },
                        new
                        {
                            Code = "MA",
                            CountryCode = "US",
                            Name = "Massachusetts"
                        },
                        new
                        {
                            Code = "MI",
                            CountryCode = "US",
                            Name = "Michigan"
                        },
                        new
                        {
                            Code = "MN",
                            CountryCode = "US",
                            Name = "Minnesota"
                        },
                        new
                        {
                            Code = "MS",
                            CountryCode = "US",
                            Name = "Mississippi"
                        },
                        new
                        {
                            Code = "MO",
                            CountryCode = "US",
                            Name = "Missouri"
                        },
                        new
                        {
                            Code = "MT",
                            CountryCode = "US",
                            Name = "Montana"
                        },
                        new
                        {
                            Code = "NE",
                            CountryCode = "US",
                            Name = "Nebraska"
                        },
                        new
                        {
                            Code = "NV",
                            CountryCode = "US",
                            Name = "Nevada"
                        },
                        new
                        {
                            Code = "NH",
                            CountryCode = "US",
                            Name = "New Hampshire"
                        },
                        new
                        {
                            Code = "NJ",
                            CountryCode = "US",
                            Name = "New Jersey"
                        },
                        new
                        {
                            Code = "NM",
                            CountryCode = "US",
                            Name = "New Mexico"
                        },
                        new
                        {
                            Code = "NY",
                            CountryCode = "US",
                            Name = "New York"
                        },
                        new
                        {
                            Code = "NC",
                            CountryCode = "US",
                            Name = "North Carolina"
                        },
                        new
                        {
                            Code = "ND",
                            CountryCode = "US",
                            Name = "North Dakota"
                        },
                        new
                        {
                            Code = "MP",
                            CountryCode = "US",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Code = "OH",
                            CountryCode = "US",
                            Name = "Ohio"
                        },
                        new
                        {
                            Code = "OK",
                            CountryCode = "US",
                            Name = "Oklahoma"
                        },
                        new
                        {
                            Code = "OR",
                            CountryCode = "US",
                            Name = "Oregon"
                        },
                        new
                        {
                            Code = "PA",
                            CountryCode = "US",
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            Code = "PR",
                            CountryCode = "US",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Code = "RI",
                            CountryCode = "US",
                            Name = "Rhode Island"
                        },
                        new
                        {
                            Code = "SC",
                            CountryCode = "US",
                            Name = "South Carolina"
                        },
                        new
                        {
                            Code = "SD",
                            CountryCode = "US",
                            Name = "South Dakota"
                        },
                        new
                        {
                            Code = "TN",
                            CountryCode = "US",
                            Name = "Tennessee"
                        },
                        new
                        {
                            Code = "TX",
                            CountryCode = "US",
                            Name = "Texas"
                        },
                        new
                        {
                            Code = "UM",
                            CountryCode = "US",
                            Name = "United States Minor Outlying Islands"
                        },
                        new
                        {
                            Code = "UT",
                            CountryCode = "US",
                            Name = "Utah"
                        },
                        new
                        {
                            Code = "VT",
                            CountryCode = "US",
                            Name = "Vermont"
                        },
                        new
                        {
                            Code = "VI",
                            CountryCode = "US",
                            Name = "Virgin Islands, U.S."
                        },
                        new
                        {
                            Code = "VA",
                            CountryCode = "US",
                            Name = "Virginia"
                        },
                        new
                        {
                            Code = "WA",
                            CountryCode = "US",
                            Name = "Washington"
                        },
                        new
                        {
                            Code = "WV",
                            CountryCode = "US",
                            Name = "West Virginia"
                        },
                        new
                        {
                            Code = "WI",
                            CountryCode = "US",
                            Name = "Wisconsin"
                        },
                        new
                        {
                            Code = "WY",
                            CountryCode = "US",
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinAddress", b =>
                {
                    b.HasOne("jumwebapi.Models.Lookups.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jumwebapi.Models.Lookups.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinAgencyAssignment", b =>
                {
                    b.HasOne("jumwebapi.Data.ef.JustinAgency", "Agency")
                        .WithMany("AgencyAssignments")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinPerson", b =>
                {
                    b.HasOne("jumwebapi.Data.ef.JustinAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinUser", b =>
                {
                    b.HasOne("jumwebapi.Data.ef.JustinAgency", "Agency")
                        .WithMany("Users")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jumwebapi.Data.ef.JustinIdentityProvider", "IdentityProvider")
                        .WithMany()
                        .HasForeignKey("IdentityProviderId");

                    b.HasOne("jumwebapi.Data.ef.JustinPartyType", "PartyType")
                        .WithMany()
                        .HasForeignKey("PartyTypeCode");

                    b.HasOne("jumwebapi.Data.ef.JustinPerson", "Person")
                        .WithOne("User")
                        .HasForeignKey("jumwebapi.Data.ef.JustinUser", "PersonId")
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("IdentityProvider");

                    b.Navigation("PartyType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinUserRole", b =>
                {
                    b.HasOne("jumwebapi.Data.ef.JustinRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("jumwebapi.Data.ef.JustinUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("jumwebapi.Features.UserChangeManagement.Data.JustinUserChangeTarget", b =>
                {
                    b.HasOne("jumwebapi.Features.UserChangeManagement.Data.JustinUserChange", "JustinUserChange")
                        .WithMany("TargetChanges")
                        .HasForeignKey("JustinUserChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JustinUserChange");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinAgency", b =>
                {
                    b.Navigation("AgencyAssignments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinPerson", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("jumwebapi.Data.ef.JustinUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("jumwebapi.Features.UserChangeManagement.Data.JustinUserChange", b =>
                {
                    b.Navigation("TargetChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
